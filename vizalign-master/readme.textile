

h1.  

!http://cataclysmicrewind.com/vizalign/examples/VizAlign-Logo-calm-your-ocd.png(VizAlign Logo)!

<br/>

h2. align your graphics the way you see it.

	VizAlign is a powerful, extendable, alignment utility that allows you to *vizually align* DisplayObject. it is a new way of thinking about aligning, and will forever change your alignment habits. when you position something, you expect it to end up where you envision it; VizAlign helps you do that. the core is so extendable i never run out of new feature ideas. documentation is something i see as vital so i hope the information you find here is helpful to working with VizAlign. 


***

	*disclaimer:* although i am confident about the code i have written, i cannot guarantee it is bug free.
	i do not have unit tests (but looking for help on writing them!)
	<br>
	we are currently on version 0.6. this is the first public release.

***

<br/>

h2. powerful api:
	
	each alignment you want to happen will need the objects you want to move (targets) a stationary object (targetCoordinateSpace) and an object (aligner) that will place the targets in relation to the targetCoordinateSpace. this utility breaks these pieces down into four main objects. 
	
	each code statement below builds upon the previous, so if you are not sure what the variable referenced is, look up.

	IRectangleAligner align Rectangle. in VizAlign, all DisplayObject get treated as Rectangle.
	aligner.alignRectangles(targetCoordinateSpace, targets); 
	@var aligner:IRectangleAligner = new CenterAligner();@

	VizAlignment: each alignment needs two things: an aligner and a targetCoordinateSpace. 
	therefore alignments can: alignment.align(targets:Array);
	@var alignment:VizAlignment = new VizAlignment(aligner, stage); //stage = this.stage;@

	VizAlign: the butler to the alignments. give him the targets and your alignments, he will make sure they happen.
	VizAlign requires targets be DisplayObject. 
	@var results:Array = VizAlign.align ([new DisplayObject()], [alignment]); //has 3 more Boolean params (explained below)@

	VizAlignTarget hold the target, its original dimensions, calculated dimensions and other settings
	@var vizAlignTarget:VizAlignTarget = results[0];@

h6. NOTE: you *cannot* actually instantiate a new DisplayObject(). this is however, the base class that is accepted for a target in VizAlign. you can also send VizAlignTarget objects in if you want to continue from a previous alignment. (see docs &| src)
	
h3. features:
		
* *natural api*: i want to align these [targets] to the [left of the stage].
* *40* alignments (and more coming!)
* align @Rectangle || DisplayObject@
* *extend*-able framework 
* returns results for *animation* or storage
* *group*-ing!

<br/>

h2. show me:

	come on up, relax, and take a look at the capabilities swf, which will let you play around with VizAlign, get used to how it works, and learn all the alignments available!

h4. "VizAlign capabilities":http://www.cataclysmicrewind.com/vizalign/showme/ [swf+video]

<br>

h2. change the way you think about alignment:
	
	alignment of objects is always a pain, in almost all environments i have worked in the learning curve is frustrating. why? because positioning is never natural. VizAlign hopes to solve this problem. tell me, how often has this come up in your life:
		
bq. _i wish i could make this always stay centered on that_
	 _i want this to fill this area but maintain its aspect ratio_
	 _i want these graphics to be spaced evenly inside this area_
	 _i want these two objects, treated as one, to move next to this other object_
	 _i want this object to always be 30% of the height of this object (in development!)_
		
	the way you think about the alignments, ie. the words you use to describe them are exactly how VizAlign functions.


h3. you want: 
	
	to align the two rectangles to scale to fit inside the stage, then center them to the stage. <br> oh, and ignore their origins, move the targets for me and make sure they get put on whole values.

h4. example:
    
h6. NOTE: i use a ficticious `RectangleSprite` to remove boilerplate code from the example. <br>
    function RectangleSprite (x:int, y:int, w:int, h:int, color:uint);

<pre><code>var redRect :RectangleSprite = new RectangleSprite(0, 0, 100, 100, 0xFF0000);
var blueRect:RectangleSprite = new RectangleSprite(0, 0,  10,  50, 0x0000FF);
addChild(redRect); addChild(blueRect);
var targets:Array = [redRect, blueRect];

/*
 * longhand way
 */
var scaleToFit:VizAlignment = new VizAlignment (new ScaleToFitAligner(), stage);
var center    :VizAlignment = new VizAlignment (new CenterAligner()    , stage);
var alignments:Array = [scaleToFit, center];

var ignoreOrigins:Boolean = true;  // do not include the origin point of the DisplayObject when calculating
var applyResults :Boolean = true;  // have VizAlign move the objects to the end result
var pixelHinting :Boolean = true;  // round the results to the nearest whole value

VizAlign.align (targets, alignments, ignoreOrigins, applyResults, pixelHinting);

/*
 * shorthand way
 */
var scaleToFit:VizAlignment = new VizAlignment (new ScaleToFitAligner(), stage);
var center    :VizAlignment = new VizAlignment (new CenterAligner()    , stage);

VizAlign.align ([redRect, blueRect], [scaleToFit, center], true, true, true);

/*
 * one liner
 */
VizAlign.align ([redRect, blueRect], [new VizAlignment (new ScaleToFitAligner(), stage), new VizAlignment (new CenterAligner(), stage)], true, true, true);
</code></pre>

try reading the one liner above out loud like a sentence. if you can learn to think of your alignments like that, VizAlign will be a breeze and you'll want to raise your arms and just expel the stress into the wind. *ahhh.*

<br>

h2. origins:

in as3 (i hope) you know that each DisplayObject has its own coordinate plane. this coordinate plane is like a piece of translucent grid paper with a coordinate plane drawn on it. you can draw your graphics anywhere you want on that paper. but no matter where you draw the graphics, flash will always think the .x and .y properties are at 0,0 of that coordinate plane! you might be familiar with it as the registration or rotation point of an object.

h3. hmmm:

if you draw on your paper a 4x4 box at position 5x3, and you place the paper at 5,5 on the stage (or parent), the 4x4 box will look 5 to the right and 3 down from 5,5 (not where you might expect it to land)

h6. duh, flash's y coordinate is flipped from maths
	
!=http://cataclysmicrewind.com/vizalign/examples/coordinatePlane.png!

h4. this, right here, is the reason i made VizAlign. 

ignoring the origins of a target is implemented in the VizAlignTarget class, and can be turned on for every target through the third parameter of VizAlign.align() @ignoreOrigins:Boolean = false@.
given the example above, setting ignoreOrigins to true, will make it appear as if the blue box is actually at 0,0, ignoring wherever the origin of the target is, and simply going off the bounding box of the target's graphics.

h3. codely

with ignoreOrigins = false, VizAlignTarget will use x,y,width,height to create the bounding Rectangle of each target.
with ignoreOrigins = true, VizAlignTarget will figure out the bounding box of the graphics within the target, and then determien the distance between the top left corner of the graphics bounding box and 0,0 of the coordinate plane. thus we eliminate that obnoxious problem.


<br/>

h2. grouping:

grouping allows you to send in multidimensional arrays as targets. if an element in the targets array is an array, VizAlign treats it as a group, where the targets conainted are treated as one (like they have the same parent). you can nest groups as deep as you want theoretically, but i have not tested this much. this is the same exact feature that a lot of design tools have. these tools normally have the keyboard shortcut ctrl+g to 'group' objects so you can move them around together. 


h3. you want:

to make a button. that button has a textfield and shape. you use VizAlign to center the two on top of each other and then align the two as a group to make the button as a whole align to the bottom right hand side of the window.

h4. example:
	
<pre><code>// center textfield on top of shape
VizAlign.align( [textfield], [new VizAlignment(new CenterAligner(), shape)], true, true, true);

// treat textfield and shape as one object and place at bottom right of window
VizAlign.align ( [[textfield, shape]], [new VizAlignment (new BottomRightAligner(), window)], true, true true);
</code></pre>

<br/>

h2. gotcha!

	*targets != [parent, child]*
	
	do not send a parent and its child as targets to the same alignment call. you are will get results that are not what you expect. VizAlign modifies the x,y,width,height values of each target. moving or scaling a parent will cause the child to change with it. there may be some cases where this might not actually effect anything but those are extremely rare. 
	
	this is not a bug, but a missing feature that i do not plan on implementing. it would require a massive change in architecture and it is simply not worth it. ideally, if you setup your projects right you would never want to do this in the first place.
	
h4. example:
	
h6. NOTE: this will look really wrong!
download the src, it contains this example file so compile and smile! because i was right, this looks wrong.
don't forget to click the stage to make the alignment happen!
	
<pre><code>
package {
	import flash.display.Sprite;
	import flash.events.MouseEvent;
	import ktu.utils.align.aligners.CenterAligner;
	import ktu.utils.align.VizAlign;
	import ktu.utils.align.VizAlignment;
    public class Gotcha extends Sprite {
        public function Gotcha():void {
            var tcs:RectangleSprite = new RectangleSprite(0, 0, 300, 300, 0xAACCFF);
            addChild(tcs);
            VizAlign.align([tcs], [new VizAlignment (new CenterAligner(), stage)], true, true, true);
            
            var greenGuy:RectangleSprite = new RectangleSprite(10, 10, 100, 100, 0x00FF00);
            var brownGuy:RectangleSprite = new RectangleSprite(80, 70,  60,  50, 0x623131);
            addChild(greenGuy);
            greenGuy.addChild(brownGuy);
			
            stage.addEventListener(MouseEvent.CLICK, function (e:MouseEvent):void {
                VizAlign.align ([brownGuy, greenGuy], [new VizAlignment (new CenterAligner(), tcs)], true, true, true);
            });
        }
    }
}
// simple class to remove boilerplate from main function.
import flash.display.Sprite;
class RectangleSprite extends Sprite {
    public function RectangleSprite(x:int, y:int, w:int, h:int, color:uint) {
        graphics.beginFill(color);
        graphics.drawRect(0, 0, w, h);
        this.x = x; this.y = y;
    }
}
</code></pre>

<br>

h2. contribute

h4. a little feedback goes a long way.

* send me emails [ktu at cataclysmicrewind.com]
* comment on my "blog":http://blog.cataclysmicrewind.com
* submit issues
* teach me how to do pull requests (and maybe i'll do them)

	tell me things like stories about your own project and how it helped, or if you felt confused or needed help, or ideas you have, features you'd like, bugs, anything!

<br>

h2. license

h4. "MIT":http://www.opensource.org/licenses/mit-license.html

<br> 
	
h3. thanks for reading.

